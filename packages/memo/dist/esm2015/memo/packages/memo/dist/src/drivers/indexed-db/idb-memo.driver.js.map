{"version":3,"file":"idb-memo.driver.js","sources":["../../../../../../../../../src/drivers/indexed-db/idb-memo.driver.ts"],"sourcesContent":["import { WEAVER_CONTEXT } from '@aspectjs/core';\nimport { MemoDriver } from '../memo.driver';\nimport { MemoEntry, MemoKey } from '../../memo.types';\nimport { assert } from '@aspectjs/core/utils';\nimport { MemoFrame, MemoTypeInfoFrame } from '../memo-frame';\nimport { LsMemoDriver } from '..';\nimport { MemoAspect } from '../../memo.aspect';\nimport { MemoAspectError } from '../../errors';\nimport { Scheduler } from '../scheduler';\nimport { MarshallingContext } from '../../marshalling/marshalling-context';\n\nenum TransactionMode {\n    READONLY = 'readonly',\n    READ_WRITE = 'readwrite',\n}\n\n/**\n * Options supported by the IdbMemoDriver\n * @public\n */\nexport interface IndexedDbDriverOptions {\n    indexedDB: typeof indexedDB;\n    localStorageDriver: LsMemoDriver;\n}\n\n/**\n * Memo driver to store async @Memo result into the Indexed Database.\n * @public\n */\nexport class IdbMemoDriver extends MemoDriver {\n    static readonly NAME = 'indexedDb';\n    readonly NAME = IdbMemoDriver.NAME;\n\n    static readonly DATABASE_NAME = 'IndexedDbMemoAspect_db';\n    static readonly STORE_NAME = 'results';\n    static readonly DATABASE_VERSION = 1; // change this value whenever a backward-incompatible change is made to the store\n    private readonly _scheduler = new Scheduler();\n    private _init$: Promise<IDBDatabase>;\n    private _localStorageDriver: MemoDriver;\n\n    constructor(protected _params: Partial<IndexedDbDriverOptions> = {}) {\n        super();\n        this._init$ = this._openDb();\n    }\n\n    private get _idb(): IDBFactory {\n        return this._params.indexedDB ?? indexedDB;\n    }\n\n    private get _ls(): MemoDriver {\n        this._localStorageDriver = this._findLsDriver();\n        return this._localStorageDriver;\n    }\n\n    getKeys(namespace: string): Promise<MemoKey[]> {\n        return this._runTransactional((store) => store.getAllKeys(), TransactionMode.READONLY).then((result) => {\n            return result\n                .map((id) => id.toString())\n                .map((str) => MemoKey.parse(str, false))\n                .filter((k) => !!k);\n        });\n    }\n\n    private _openDb() {\n        return new Promise<IDBDatabase>((resolve, reject) => {\n            const dbRequest = this._idb.open(IdbMemoDriver.DATABASE_NAME, IdbMemoDriver.DATABASE_VERSION);\n            dbRequest.addEventListener('upgradeneeded', () => {\n                const db = dbRequest.result;\n                const store = db.createObjectStore(IdbMemoDriver.STORE_NAME, {\n                    keyPath: 'ref', // TODO handle other MemoKey fields\n                    autoIncrement: false,\n                });\n                store.createIndex('by_key', 'key', { unique: true });\n            });\n            dbRequest.addEventListener('success', () => resolve(dbRequest.result));\n            dbRequest.addEventListener('error', (err) => reject(err));\n        });\n    }\n\n    getPriority(context: MarshallingContext): number {\n        return 100;\n    }\n\n    accepts(context: MarshallingContext): boolean {\n        return context.frame.isAsync();\n    }\n\n    read<T>(key: MemoKey): MemoEntry<T> {\n        const metaKey = createMetaKey(key);\n        const metaEntry = this._ls.read(metaKey);\n\n        if (!metaEntry) {\n            return null;\n        }\n\n        assert(!!metaEntry.frame?.type);\n        assert(!!metaEntry.key);\n\n        const asyncValue = this._runTransactional((tx) => tx.get(key.toString())).then((frame) => {\n            if (!frame) {\n                this._ls.remove(metaKey);\n                throw new MemoAspectError(`No data found for key ${key}`);\n            }\n            return frame.value;\n        });\n\n        const frame = new MemoFrame<T>({\n            ...metaEntry,\n            ...metaEntry.frame,\n        }).setAsyncValue(asyncValue);\n\n        this._scheduler.add(key.toString(), () => frame.async);\n\n        return frame\n            ? {\n                  ...metaEntry,\n                  key,\n                  frame,\n              }\n            : undefined;\n    }\n\n    remove(key: MemoKey): PromiseLike<void> {\n        return this._scheduler\n            .add(key.toString(), () => this._deleteIdbEntry(key).then(() => this._deleteLsEntry(key)))\n            .then(() => {});\n    }\n\n    write(entry: MemoEntry): PromiseLike<any> {\n        return this._scheduler.add(entry.key.toString(), () => {\n            const { value, ...metaFrame } = entry.frame;\n\n            const metaEntry: MemoEntry<MemoTypeInfoFrame> = {\n                ...entry,\n                key: createMetaKey(entry.key),\n                frame: metaFrame as MemoFrame,\n            };\n            // store only the Memo without its value\n            this._ls.write(metaEntry);\n\n            const valueFrame = { ref: entry.key.toString(), value };\n            return this._runTransactional((s) => s.put(valueFrame));\n        });\n    }\n\n    private _deleteIdbEntry(key: MemoKey) {\n        return this._runTransactional((s) => s.delete(key.toString()));\n    }\n\n    private _deleteLsEntry(key: MemoKey) {\n        this._ls.remove(key);\n    }\n\n    private _runTransactional<R>(\n        transactionFn: (store: IDBObjectStore) => IDBRequest<R>,\n        mode: TransactionMode = TransactionMode.READ_WRITE,\n    ): Promise<R> {\n        return this._init$.then(\n            (database) =>\n                new Promise<R>((resolve, reject) => {\n                    const store = database\n                        .transaction(IdbMemoDriver.STORE_NAME, mode)\n                        .objectStore(IdbMemoDriver.STORE_NAME);\n\n                    const request = transactionFn(store);\n\n                    request.addEventListener('success', () => resolve(request.result));\n                    request.addEventListener('error', (r) => {\n                        const error = (r.target as any)?.error ?? r;\n                        console.error(error);\n                        return reject(error);\n                    });\n                }),\n        );\n    }\n\n    private _findLsDriver() {\n        if (this._localStorageDriver) {\n            return this._localStorageDriver;\n        }\n\n        if (this._params.localStorageDriver) {\n            return this._params.localStorageDriver;\n        }\n\n        const drivers = (WEAVER_CONTEXT.getWeaver().getAspect('@aspectjs/memo') as MemoAspect).getDrivers();\n        if (!drivers['localStorage']) {\n            throw new MemoAspectError(\n                `${IdbMemoDriver.prototype.constructor.name} requires a \"localStorage\" driver, but option \"localStorageDriver\" is not set and no driver could be found with name \"localStorage\"`,\n            );\n        }\n        return drivers['localStorage'];\n    }\n}\n\nfunction createMetaKey(key: MemoKey) {\n    return new MemoKey(key, `${key.namespace}[idb_meta]`);\n}\n"],"names":[],"mappings":"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"}