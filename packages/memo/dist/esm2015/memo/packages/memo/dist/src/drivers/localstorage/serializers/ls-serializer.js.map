{"version":3,"file":"ls-serializer.js","sources":["../../../../../../../../../../src/drivers/localstorage/serializers/ls-serializer.ts"],"sourcesContent":["import { isUndefined } from '@aspectjs/core/utils';\nimport { parse, stringify } from 'flatted';\nimport { MemoEntry } from '../../../memo.types';\nimport { MemoFrame } from '../../memo-frame';\nimport { LsMemoSerializer } from './ls-serializer.type';\n\nenum RawMemoField {\n    VALUE,\n    TYPE,\n    INSTANCE_TYPE,\n    EXPIRATION,\n    VERSION,\n    SIGNATURE,\n    HASH,\n}\n\nconst F = RawMemoField;\n\nexport class SimpleLsSerializer implements LsMemoSerializer {\n    deserialize(serialized: string): Omit<MemoEntry, 'key'> {\n        if (!serialized) {\n            return null;\n        }\n        const raw = parse(serialized);\n        return {\n            expiration: raw[F.EXPIRATION] ? new Date(raw[F.EXPIRATION]) : undefined,\n            frame: new MemoFrame({\n                value: raw[F.VALUE],\n                type: raw[F.TYPE],\n                instanceType: raw[F.INSTANCE_TYPE],\n                version: raw[F.VERSION],\n                hash: raw[F.HASH],\n            }),\n            signature: raw[F.SIGNATURE],\n        };\n    }\n\n    serialize(entry: Omit<MemoEntry, 'key'>): string {\n        const raw = {} as any;\n\n        if (!isUndefined(entry.frame.value)) {\n            raw[F.VALUE] = entry.frame.value;\n        }\n        if (!isUndefined(entry.frame.type)) {\n            raw[F.TYPE] = entry.frame.type;\n        }\n        if (!isUndefined(entry.frame.instanceType)) {\n            raw[F.INSTANCE_TYPE] = entry.frame.instanceType;\n        }\n        if (!isUndefined(entry.frame.version)) {\n            raw[F.VERSION] = entry.frame.version;\n        }\n        if (!isUndefined(entry.frame.hash)) {\n            raw[F.HASH] = entry.frame.hash;\n        }\n        if (!isUndefined(entry.expiration)) {\n            raw[F.EXPIRATION] = entry.expiration;\n        }\n        if (!isUndefined(entry.signature)) {\n            raw[F.SIGNATURE] = entry.signature;\n        }\n        return stringify(raw);\n    }\n}\n"],"names":[],"mappings":";;;;AAMA,IAAK,YAQJ;AARD,WAAK,YAAY;IACb,iDAAK,CAAA;IACL,+CAAI,CAAA;IACJ,iEAAa,CAAA;IACb,2DAAU,CAAA;IACV,qDAAO,CAAA;IACP,yDAAS,CAAA;IACT,+CAAI,CAAA;AACR,CAAC,EARI,YAAY,KAAZ,YAAY,QAQhB;AAED,MAAM,CAAC,GAAG,YAAY,CAAC;MAEV,kBAAkB;IAC3B,WAAW,CAAC,UAAkB;QAC1B,IAAI,CAAC,UAAU,EAAE;YACb,OAAO,IAAI,CAAC;SACf;QACD,MAAM,GAAG,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QAC9B,OAAO;YACH,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,GAAG,SAAS;YACvE,KAAK,EAAE,IAAI,SAAS,CAAC;gBACjB,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;gBACnB,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;gBACjB,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC;gBAClC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC;gBACvB,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;aACpB,CAAC;YACF,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;SAC9B,CAAC;KACL;IAED,SAAS,CAAC,KAA6B;QACnC,MAAM,GAAG,GAAG,EAAS,CAAC;QAEtB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACjC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;SACpC;QACD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YAChC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;SAClC;QACD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE;YACxC,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC;SACnD;QACD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;YACnC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;SACxC;QACD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YAChC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;SAClC;QACD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;YAChC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC;SACxC;QACD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;YAC/B,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC;SACtC;QACD,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;KACzB;;;;;"}