{"version":3,"file":"cacheable.annotation.js","sources":["../../../../../../../../src/cacheable/cacheable.annotation.ts"],"sourcesContent":["import { ASPECTJS_ANNOTATION_FACTORY, AnnotationRef } from '@aspectjs/core/commons';\n\n// TODO remove when https://github.com/microsoft/rushstack/issues/1050 is resolved\nAnnotationRef;\n\n/**\n * Options accepted by the \\@Cacheable annotation.\n *\n * @public\n */\nexport interface CacheableOptions {\n    /** Identifies the type of object to be cached. If not provided, a typeId should is generated automatically **/\n    typeId?: string;\n    /** Any entry of the @Cacheable object with a different version is evicted from the cache. Supports SemVer versioning **/\n    version?: string | number | (() => string | number);\n}\nfunction Cacheable(opts?: CacheableOptions): ClassDecorator;\nfunction Cacheable(typeId?: string): ClassDecorator;\nfunction Cacheable(typeId?: string | CacheableOptions): ClassDecorator {\n    return;\n}\n\n/**\n * Indicates that the result of annotated method could be cached.\n * @public\n */\nconst _Cacheable = ASPECTJS_ANNOTATION_FACTORY.create(Cacheable);\n\nexport { _Cacheable as Cacheable };\n"],"names":[],"mappings":";;AAkBA,SAAS,SAAS,CAAC,MAAkC;IACjD,OAAO;AACX,CAAC;AAED;;;;MAIM,UAAU,GAAG,2BAA2B,CAAC,MAAM,CAAC,SAAS;;;;"}