{"version":3,"file":"array-marshaller.js","sources":["../../../../../../../../../src/marshalling/marshallers/array-marshaller.ts"],"sourcesContent":["import { MemoFrame } from '../../drivers';\nimport { MarshalFn, MemoMarshaller, UnmarshalFn } from './marshaller';\nimport { MarshallingContext, UnmarshallingContext } from '../marshalling-context';\n\n/**\n * Supports marshalling arrays\n * @public\n */\nexport class ArrayMarshaller extends MemoMarshaller {\n    readonly types = 'Array';\n\n    marshal(frame: MemoFrame<unknown[]>, context: MarshallingContext, defaultMarshal: MarshalFn): MemoFrame<any[]> {\n        // array may contain promises\n        frame.value = frame.value.map((i) => defaultMarshal(i));\n\n        return frame;\n    }\n    unmarshal(frame: MemoFrame<unknown[]>, context: UnmarshallingContext, defaultUnmarshal: UnmarshalFn): unknown[] {\n        // assert(wrapped[F.TYPE] === ValueType.ARRAY);\n        const value = [] as any[];\n\n        context.blacklist.set(frame, value);\n        value.push(...((frame.value as any) as any[]).map((w) => defaultUnmarshal(w)));\n        return value;\n    }\n}\n"],"names":[],"mappings":";;AAIA;;;;MAIa,eAAgB,SAAQ,cAAc;IAAnD;;QACa,UAAK,GAAG,OAAO,CAAC;KAgB5B;IAdG,OAAO,CAAC,KAA2B,EAAE,OAA2B,EAAE,cAAyB;;QAEvF,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;QAExD,OAAO,KAAK,CAAC;KAChB;IACD,SAAS,CAAC,KAA2B,EAAE,OAA6B,EAAE,gBAA6B;;QAE/F,MAAM,KAAK,GAAG,EAAW,CAAC;QAE1B,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACpC,KAAK,CAAC,IAAI,CAAC,GAAK,KAAK,CAAC,KAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/E,OAAO,KAAK,CAAC;KAChB;;;;;"}