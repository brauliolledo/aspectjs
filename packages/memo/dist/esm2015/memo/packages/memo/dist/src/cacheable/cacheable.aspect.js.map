{"version":3,"file":"cacheable.aspect.js","sources":["../../../../../../../../src/cacheable/cacheable.aspect.ts"],"sourcesContent":["import { Aspect, Compile } from '@aspectjs/core/annotations';\nimport { AdviceType, CompileContext, on } from '@aspectjs/core/commons';\nimport { assert, getOrComputeMetadata, isObject } from '@aspectjs/core/utils';\nimport { Cacheable, CacheableOptions } from './cacheable.annotation';\n\n/**\n * @public\n */\nexport type Prototype = {\n    constructor: Function;\n};\n\n/**\n * Store the signature of an object annotated wuth @Cacheable in order\n * to be able to cache it with the @Memo annotation\n *\n * @public\n */\nexport interface CacheableAspect {\n    readonly cacheTypeStore: CacheTypeStore;\n}\n\n/**\n * @public\n */\nexport interface CacheTypeStore {\n    getPrototype(key: string): Prototype;\n    getVersion(key: string): any;\n    getTypeKey<T extends Prototype>(proto: T): string;\n\n    addPrototype<T extends Prototype>(proto: T, key: string, version?: any): void;\n}\n\n/**\n * Assign a key to the prototype of a class into a CacheTypeStore,\n * so that Memo drivers can inflate memoized objects with proper types.\n *\n * @public\n */\n@Aspect('@aspectjs/cacheable')\nexport class DefaultCacheableAspect implements CacheableAspect {\n    constructor(public readonly cacheTypeStore: CacheTypeStore = new _CacheTypeStoreImpl()) {}\n    @Compile(on.class.withAnnotations(Cacheable))\n    registerCacheKey(ctxt: CompileContext<any, AdviceType.CLASS>) {\n        let options = ctxt.annotations.onSelf(Cacheable)[0].args[0] as CacheableOptions;\n        if (!isObject(options)) {\n            options = {\n                typeId: options,\n            };\n        }\n        const typeId = options.typeId ?? _generateTypeId(ctxt.target.proto);\n\n        this.cacheTypeStore.addPrototype(ctxt.target.proto, typeId, options.version);\n    }\n}\n\n/**\n * Store class prototypes along with a defined key.\n * @internal\n */\nexport class _CacheTypeStoreImpl implements CacheTypeStore {\n    private readonly _prototypes: Map<string, { version?: string; proto: Prototype }> = new Map();\n\n    getPrototype(key: string): Prototype {\n        assert(!!key, 'key must be defined');\n        const entry = this._prototypes.get(key);\n        if (!entry) {\n            throw new Error(`no prototype found for key ${key}`);\n        }\n        return entry.proto;\n    }\n\n    getTypeKey<T extends Prototype>(prototype: T): string {\n        return Reflect.getOwnMetadata('@aspectjs/cacheable:typekey', prototype);\n    }\n\n    addPrototype(proto: Prototype, typeId: string, version?: string): void {\n        const existingProto = this._prototypes.get(typeId);\n        if (existingProto && existingProto !== proto) {\n            throw new Error(\n                `Cannot call @Cacheable({typeId = ${typeId}}) on ${proto?.constructor?.name}: typeId is already assigned to ${existingProto?.constructor?.name}`,\n            );\n        }\n\n        this._prototypes.set(typeId, { proto, version });\n    }\n\n    getVersion(key: string): string {\n        return this._prototypes.get(key)?.version ?? undefined;\n    }\n}\n\nlet globalId = 0;\nfunction _generateTypeId(proto: any): string {\n    return getOrComputeMetadata('@aspectjs/cacheable:typekey', proto, () => {\n        return `${proto.constructor.name}#${globalId++}`;\n    });\n}\n"],"names":["Cacheable"],"mappings":";;;;;;AAiCA;;;;;;IAOa,sBAAsB,GAAnC,MAAa,sBAAsB;IAC/B,YAA4B,iBAAiC,IAAI,mBAAmB,EAAE;QAA1D,mBAAc,GAAd,cAAc,CAA4C;KAAI;IAE1F,gBAAgB,CAAC,IAA2C;;QACxD,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAACA,UAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAqB,CAAC;QAChF,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACpB,OAAO,GAAG;gBACN,MAAM,EAAE,OAAO;aAClB,CAAC;SACL;QACD,MAAM,MAAM,GAAG,MAAA,OAAO,CAAC,MAAM,mCAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEpE,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;KAChF;EACJ;AAXG;IADC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,eAAe,CAACA,UAAS,CAAC,CAAC;;;;8DAW5C;AAbQ,sBAAsB;IADlC,MAAM,CAAC,qBAAqB,CAAC;;GACjB,sBAAsB,CAclC;AAED;;;;MAIa,mBAAmB;IAAhC;QACqB,gBAAW,GAAwD,IAAI,GAAG,EAAE,CAAC;KA6BjG;IA3BG,YAAY,CAAC,GAAW;QACpB,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;QACrC,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACxC,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,EAAE,CAAC,CAAC;SACxD;QACD,OAAO,KAAK,CAAC,KAAK,CAAC;KACtB;IAED,UAAU,CAAsB,SAAY;QACxC,OAAO,OAAO,CAAC,cAAc,CAAC,6BAA6B,EAAE,SAAS,CAAC,CAAC;KAC3E;IAED,YAAY,CAAC,KAAgB,EAAE,MAAc,EAAE,OAAgB;;QAC3D,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACnD,IAAI,aAAa,IAAI,aAAa,KAAK,KAAK,EAAE;YAC1C,MAAM,IAAI,KAAK,CACX,oCAAoC,MAAM,SAAS,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,WAAW,0CAAE,IAAI,mCAAmC,MAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,WAAW,0CAAE,IAAI,EAAE,CACnJ,CAAC;SACL;QAED,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;KACpD;IAED,UAAU,CAAC,GAAW;;QAClB,OAAO,MAAA,MAAA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,0CAAE,OAAO,mCAAI,SAAS,CAAC;KAC1D;CACJ;AAED,IAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,SAAS,eAAe,CAAC,KAAU;IAC/B,OAAO,oBAAoB,CAAC,6BAA6B,EAAE,KAAK,EAAE;QAC9D,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,IAAI,QAAQ,EAAE,EAAE,CAAC;KACpD,CAAC,CAAC;AACP;;;;"}