{"version":3,"file":"promise-marshaller.js","sources":["../../../../../../../../../src/marshalling/marshallers/promise-marshaller.ts"],"sourcesContent":["import { MemoFrame } from '../../drivers';\nimport { MarshalFn, MemoMarshaller, UnmarshalFn } from './marshaller';\nimport { MarshallingContext, UnmarshallingContext } from '../marshalling-context';\n\n/**\n * Supports marshalling promises\n * @public\n */\nexport class PromiseMarshaller extends MemoMarshaller<Promise<any>, any> {\n    readonly types = 'Promise';\n\n    marshal(\n        frame: MemoFrame<Promise<unknown>>,\n        context: MarshallingContext,\n        defaultMarshal: MarshalFn,\n    ): MemoFrame<Promise<any>> {\n        frame.setAsyncValue(frame.value.then((v) => defaultMarshal(v)));\n        return frame;\n    }\n\n    unmarshal(\n        frame: MemoFrame<MemoFrame<any>>,\n        context: UnmarshallingContext,\n        defaultUnmarshal: UnmarshalFn,\n    ): Promise<any> {\n        if (frame.isAsync()) {\n            return frame.async.then((v) => {\n                return defaultUnmarshal(v);\n            });\n        } else {\n            return Promise.resolve(defaultUnmarshal(frame.value));\n        }\n    }\n}\n"],"names":[],"mappings":";;AAIA;;;;MAIa,iBAAkB,SAAQ,cAAiC;IAAxE;;QACa,UAAK,GAAG,SAAS,CAAC;KAwB9B;IAtBG,OAAO,CACH,KAAkC,EAClC,OAA2B,EAC3B,cAAyB;QAEzB,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,OAAO,KAAK,CAAC;KAChB;IAED,SAAS,CACL,KAAgC,EAChC,OAA6B,EAC7B,gBAA6B;QAE7B,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;YACjB,OAAO,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBACtB,OAAO,gBAAgB,CAAC,CAAC,CAAC,CAAC;aAC9B,CAAC,CAAC;SACN;aAAM;YACH,OAAO,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;SACzD;KACJ;;;;;"}