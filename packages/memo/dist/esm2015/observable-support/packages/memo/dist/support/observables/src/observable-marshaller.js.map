{"version":3,"file":"observable-marshaller.js","sources":["../../../../../../../../../support/observables/src/observable-marshaller.ts"],"sourcesContent":["import {\n    MarshallingContext,\n    UnmarshallingContext,\n    MemoFrame,\n    MarshalFn,\n    MemoMarshaller,\n    UnmarshalFn,\n} from '@aspectjs/memo';\nimport { from, Observable } from 'rxjs';\nimport { share, shareReplay } from 'rxjs/operators';\n\n/**\n * Supports marshalling Observables\n * @public\n */\nexport class ObservableMarshaller extends MemoMarshaller<Observable<any>, any> {\n    readonly types = 'Observable';\n\n    marshal(\n        frame: MemoFrame<Observable<unknown>>,\n        context: MarshallingContext,\n        defaultMarshal: MarshalFn,\n    ): MemoFrame<Observable<any>> {\n        frame.setAsyncValue(\n            frame.value\n                .pipe(shareReplay(1))\n                .toPromise()\n                .then((v) => defaultMarshal(v)),\n        );\n        return frame;\n    }\n\n    unmarshal(\n        frame: MemoFrame<MemoFrame<any>>,\n        context: UnmarshallingContext,\n        defaultUnmarshal: UnmarshalFn,\n    ): Observable<any> {\n        if (frame.isAsync()) {\n            return from(frame.async.then((v) => defaultUnmarshal(v))).pipe(share());\n        } else {\n            return from(Promise.resolve(defaultUnmarshal(frame.value)));\n        }\n    }\n}\n"],"names":[],"mappings":";;;;AAWA;;;;MAIa,oBAAqB,SAAQ,cAAoC;IAA9E;;QACa,UAAK,GAAG,YAAY,CAAC;KA2BjC;IAzBG,OAAO,CACH,KAAqC,EACrC,OAA2B,EAC3B,cAAyB;QAEzB,KAAK,CAAC,aAAa,CACf,KAAK,CAAC,KAAK;aACN,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;aACpB,SAAS,EAAE;aACX,IAAI,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,CAAC,CAAC,CAAC,CACtC,CAAC;QACF,OAAO,KAAK,CAAC;KAChB;IAED,SAAS,CACL,KAAgC,EAChC,OAA6B,EAC7B,gBAA6B;QAE7B,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;YACjB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SAC3E;aAAM;YACH,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SAC/D;KACJ;;;;;"}